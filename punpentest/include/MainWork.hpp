#pragma once

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <list>
#include <limits>
#include <time.h>
#include <sys/time.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_sleep.h"
#include "driver/rtc_io.h"
#include "driver/uart.h"
#include "esp_log.h"

namespace ChOiler
{

  constexpr gpio_num_t OUTPUT_PUMP_CONTROL = GPIO_NUM_13; //! Betätigt die Punpe, 20ms Stöße
  constexpr gpio_num_t OUTPUT_LED = GPIO_NUM_2;           //! BLINK
  constexpr TickType_t xDelay = 800 / portTICK_PERIOD_MS;
  constexpr TickType_t yDelay = 200 / portTICK_PERIOD_MS;
  constexpr TickType_t pDelay = 20 / portTICK_PERIOD_MS;
  constexpr uint32_t P_OFF = 1;
  constexpr uint32_t P_ON = 0;

  /**
   * Auch ein statisches Objekt, ist nur enmalig vorhanden und spart damit RAM
   */
  class MainWorker
  {
  private:
    static const char *tag;                //! Kennzeichnung fürs debug
    static esp_timer_handle_t timerHandle; //! timer handle
    static volatile uint8_t pumpCycles;

  protected:
  public:
    static void init(); //! initialisiert Prferenzen und Hardware
    static void run();  //! da geht es los

  private:
    static void timerCallback(void *);
  };

} // namespace ChOiler
